// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO "Product" ("sku", "name", "expired_date", "category")
VALUES ($1, $2, $3, $4)
RETURNING id, sku, name, expired_date, category
`

type CreateProductParams struct {
	Sku         string           `json:"sku"`
	Name        string           `json:"name"`
	ExpiredDate pgtype.Timestamp `json:"expired_date"`
	Category    pgtype.Text      `json:"category"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.Sku,
		arg.Name,
		arg.ExpiredDate,
		arg.Category,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.ExpiredDate,
		&i.Category,
	)
	return i, err
}

const createShelf = `-- name: CreateShelf :one
INSERT INTO "Shelf" ("name", "product_id", "quantity")
VALUES ($1, $2, $3)
RETURNING id, name, product_id, quantity
`

type CreateShelfParams struct {
	Name      string `json:"name"`
	ProductID int32  `json:"product_id"`
	Quantity  int32  `json:"quantity"`
}

func (q *Queries) CreateShelf(ctx context.Context, arg CreateShelfParams) (Shelf, error) {
	row := q.db.QueryRow(ctx, createShelf, arg.Name, arg.ProductID, arg.Quantity)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const deleteShelfById = `-- name: DeleteShelfById :one
DELETE
FROM "Shelf"
WHERE "id" = $1
RETURNING id, name, product_id, quantity
`

func (q *Queries) DeleteShelfById(ctx context.Context, id int32) (Shelf, error) {
	row := q.db.QueryRow(ctx, deleteShelfById, id)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const findProductByName = `-- name: FindProductByName :many
SELECT id, sku, name, expired_date, category
FROM "Product"
WHERE "name" ILIKE '%' || $1 || '%'
`

func (q *Queries) FindProductByName(ctx context.Context, dollar_1 pgtype.Text) ([]Product, error) {
	rows, err := q.db.Query(ctx, findProductByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.ExpiredDate,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByCategory = `-- name: GetProductByCategory :many
SELECT id, sku, name, expired_date, category
FROM "Product"
WHERE "category" = $1
`

func (q *Queries) GetProductByCategory(ctx context.Context, category pgtype.Text) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.ExpiredDate,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one

SELECT id, sku, name, expired_date, category
FROM "Product"
WHERE "id" = $1
LIMIT 1
`

// -----------------------------------------------
// PRODUCT TABLE
// -----------------------------------------------
func (q *Queries) GetProductById(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.ExpiredDate,
		&i.Category,
	)
	return i, err
}

const getProductBySku = `-- name: GetProductBySku :one
SELECT id, sku, name, expired_date, category
FROM "Product"
WHERE "sku" = $1
LIMIT 1
`

func (q *Queries) GetProductBySku(ctx context.Context, sku string) (Product, error) {
	row := q.db.QueryRow(ctx, getProductBySku, sku)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.ExpiredDate,
		&i.Category,
	)
	return i, err
}

const getProductExpired = `-- name: GetProductExpired :many
SELECT id, sku, name, expired_date, category
FROM "Product"
WHERE "expired_date" < $1
`

func (q *Queries) GetProductExpired(ctx context.Context, expiredDate pgtype.Timestamp) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductExpired, expiredDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.ExpiredDate,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductNotExpired = `-- name: GetProductNotExpired :many
SELECT id, sku, name, expired_date, category
FROM "Product"
WHERE "expired_date" >= $1
`

func (q *Queries) GetProductNotExpired(ctx context.Context, expiredDate pgtype.Timestamp) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProductNotExpired, expiredDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Sku,
			&i.Name,
			&i.ExpiredDate,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShelfById = `-- name: GetShelfById :one

SELECT id, name, product_id, quantity
FROM "Shelf"
WHERE "id" = $1
LIMIT 1
`

// -----------------------------------------------
// SHELF TABLE
// -----------------------------------------------
func (q *Queries) GetShelfById(ctx context.Context, id int32) (Shelf, error) {
	row := q.db.QueryRow(ctx, getShelfById, id)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getShelfByProductId = `-- name: GetShelfByProductId :many
SELECT id, name, product_id, quantity
FROM "Shelf"
WHERE "product_id" = $1
`

func (q *Queries) GetShelfByProductId(ctx context.Context, productID int32) ([]Shelf, error) {
	rows, err := q.db.Query(ctx, getShelfByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shelf{}
	for rows.Next() {
		var i Shelf
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShelfBySku = `-- name: GetShelfBySku :many
SELECT id, name, product_id, quantity
FROM "Shelf"
WHERE "product_id" = (SELECT "id" FROM "Product" WHERE "sku" = $1 LIMIT 1)
`

func (q *Queries) GetShelfBySku(ctx context.Context, sku string) ([]Shelf, error) {
	rows, err := q.db.Query(ctx, getShelfBySku, sku)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shelf{}
	for rows.Next() {
		var i Shelf
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShelfBySkuAndName = `-- name: GetShelfBySkuAndName :one
SELECT id, name, product_id, quantity
FROM "Shelf" AS "s"
WHERE s.product_id = (SELECT "id" FROM "Product" WHERE "sku" = $1 LIMIT 1)
  AND s.name = $2
LIMIT 1
`

type GetShelfBySkuAndNameParams struct {
	Sku  string `json:"sku"`
	Name string `json:"name"`
}

func (q *Queries) GetShelfBySkuAndName(ctx context.Context, arg GetShelfBySkuAndNameParams) (Shelf, error) {
	row := q.db.QueryRow(ctx, getShelfBySkuAndName, arg.Sku, arg.Name)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE "Product"
SET "sku"          = $1,
    "name"         = $2,
    "expired_date" = $3,
    "category"     = $4
WHERE "id" = $5
RETURNING id, sku, name, expired_date, category
`

type UpdateProductParams struct {
	Sku         string           `json:"sku"`
	Name        string           `json:"name"`
	ExpiredDate pgtype.Timestamp `json:"expired_date"`
	Category    pgtype.Text      `json:"category"`
	ID          int32            `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.Sku,
		arg.Name,
		arg.ExpiredDate,
		arg.Category,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.ExpiredDate,
		&i.Category,
	)
	return i, err
}

const updateShelf = `-- name: UpdateShelf :one
UPDATE "Shelf"
SET "name"       = $1,
    "product_id" = $2,
    "quantity"   = $3
WHERE "id" = $4
RETURNING id, name, product_id, quantity
`

type UpdateShelfParams struct {
	Name      string `json:"name"`
	ProductID int32  `json:"product_id"`
	Quantity  int32  `json:"quantity"`
	ID        int32  `json:"id"`
}

func (q *Queries) UpdateShelf(ctx context.Context, arg UpdateShelfParams) (Shelf, error) {
	row := q.db.QueryRow(ctx, updateShelf,
		arg.Name,
		arg.ProductID,
		arg.Quantity,
		arg.ID,
	)
	var i Shelf
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}
