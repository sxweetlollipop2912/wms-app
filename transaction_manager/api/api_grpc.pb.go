// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.13.0
// source: transaction_manager/api/api.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransactionManagerClient is the client API for TransactionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionManagerClient interface {
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetDuring(ctx context.Context, in *GetDuringRequest, opts ...grpc.CallOption) (*GetDuringResponse, error)
	GetByUser(ctx context.Context, in *GetByUserRequest, opts ...grpc.CallOption) (*GetByUserResponse, error)
	AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type transactionManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionManagerClient(cc grpc.ClientConnInterface) TransactionManagerClient {
	return &transactionManagerClient{cc}
}

func (c *transactionManagerClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/simple_warehouse.transaction_manager.api.TransactionManager/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerClient) GetDuring(ctx context.Context, in *GetDuringRequest, opts ...grpc.CallOption) (*GetDuringResponse, error) {
	out := new(GetDuringResponse)
	err := c.cc.Invoke(ctx, "/simple_warehouse.transaction_manager.api.TransactionManager/GetDuring", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerClient) GetByUser(ctx context.Context, in *GetByUserRequest, opts ...grpc.CallOption) (*GetByUserResponse, error) {
	out := new(GetByUserResponse)
	err := c.cc.Invoke(ctx, "/simple_warehouse.transaction_manager.api.TransactionManager/GetByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionManagerClient) AddUser(ctx context.Context, in *AddUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/simple_warehouse.transaction_manager.api.TransactionManager/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionManagerServer is the server API for TransactionManager service.
// All implementations must embed UnimplementedTransactionManagerServer
// for forward compatibility
type TransactionManagerServer interface {
	Insert(context.Context, *InsertRequest) (*empty.Empty, error)
	GetDuring(context.Context, *GetDuringRequest) (*GetDuringResponse, error)
	GetByUser(context.Context, *GetByUserRequest) (*GetByUserResponse, error)
	AddUser(context.Context, *AddUserRequest) (*empty.Empty, error)
	mustEmbedUnimplementedTransactionManagerServer()
}

// UnimplementedTransactionManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionManagerServer struct {
}

func (UnimplementedTransactionManagerServer) Insert(context.Context, *InsertRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedTransactionManagerServer) GetDuring(context.Context, *GetDuringRequest) (*GetDuringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDuring not implemented")
}
func (UnimplementedTransactionManagerServer) GetByUser(context.Context, *GetByUserRequest) (*GetByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUser not implemented")
}
func (UnimplementedTransactionManagerServer) AddUser(context.Context, *AddUserRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedTransactionManagerServer) mustEmbedUnimplementedTransactionManagerServer() {}

// UnsafeTransactionManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionManagerServer will
// result in compilation errors.
type UnsafeTransactionManagerServer interface {
	mustEmbedUnimplementedTransactionManagerServer()
}

func RegisterTransactionManagerServer(s grpc.ServiceRegistrar, srv TransactionManagerServer) {
	s.RegisterService(&TransactionManager_ServiceDesc, srv)
}

func _TransactionManager_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple_warehouse.transaction_manager.api.TransactionManager/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManager_GetDuring_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDuringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServer).GetDuring(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple_warehouse.transaction_manager.api.TransactionManager/GetDuring",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServer).GetDuring(ctx, req.(*GetDuringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManager_GetByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServer).GetByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple_warehouse.transaction_manager.api.TransactionManager/GetByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServer).GetByUser(ctx, req.(*GetByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionManager_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionManagerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/simple_warehouse.transaction_manager.api.TransactionManager/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionManagerServer).AddUser(ctx, req.(*AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionManager_ServiceDesc is the grpc.ServiceDesc for TransactionManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple_warehouse.transaction_manager.api.TransactionManager",
	HandlerType: (*TransactionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Insert",
			Handler:    _TransactionManager_Insert_Handler,
		},
		{
			MethodName: "GetDuring",
			Handler:    _TransactionManager_GetDuring_Handler,
		},
		{
			MethodName: "GetByUser",
			Handler:    _TransactionManager_GetByUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _TransactionManager_AddUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction_manager/api/api.proto",
}
