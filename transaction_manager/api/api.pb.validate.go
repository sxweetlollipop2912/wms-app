// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: transaction_manager/api/api.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShelfQuantity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShelfQuantity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShelfQuantity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShelfQuantityMultiError, or
// nil if none found.
func (m *ShelfQuantity) ValidateAll() error {
	return m.validate(true)
}

func (m *ShelfQuantity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetShelfName()) < 1 {
		err := ShelfQuantityValidationError{
			field:  "ShelfName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Quantity

	if len(errors) > 0 {
		return ShelfQuantityMultiError(errors)
	}

	return nil
}

// ShelfQuantityMultiError is an error wrapping multiple validation errors
// returned by ShelfQuantity.ValidateAll() if the designated constraints
// aren't met.
type ShelfQuantityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShelfQuantityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShelfQuantityMultiError) AllErrors() []error { return m }

// ShelfQuantityValidationError is the validation error returned by
// ShelfQuantity.Validate if the designated constraints aren't met.
type ShelfQuantityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShelfQuantityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShelfQuantityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShelfQuantityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShelfQuantityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShelfQuantityValidationError) ErrorName() string { return "ShelfQuantityValidationError" }

// Error satisfies the builtin error interface
func (e ShelfQuantityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShelfQuantity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShelfQuantityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShelfQuantityValidationError{}

// Validate checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Transaction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transaction with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TransactionMultiError, or
// nil if none found.
func (m *Transaction) ValidateAll() error {
	return m.validate(true)
}

func (m *Transaction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TransactionValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TransactionValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := _Transaction_Action_InLookup[m.GetAction()]; !ok {
		err := TransactionValidationError{
			field:  "Action",
			reason: "value must be in list [0 1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSku()) < 1 {
		err := TransactionValidationError{
			field:  "Sku",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetShelfQuantities()) < 1 {
		err := TransactionValidationError{
			field:  "ShelfQuantities",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetShelfQuantities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("ShelfQuantities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TransactionValidationError{
						field:  fmt.Sprintf("ShelfQuantities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TransactionValidationError{
					field:  fmt.Sprintf("ShelfQuantities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetAuthorName()) < 1 {
		err := TransactionValidationError{
			field:  "AuthorName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransactionMultiError(errors)
	}

	return nil
}

// TransactionMultiError is an error wrapping multiple validation errors
// returned by Transaction.ValidateAll() if the designated constraints aren't met.
type TransactionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionMultiError) AllErrors() []error { return m }

// TransactionValidationError is the validation error returned by
// Transaction.Validate if the designated constraints aren't met.
type TransactionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionValidationError) ErrorName() string { return "TransactionValidationError" }

// Error satisfies the builtin error interface
func (e TransactionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransaction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionValidationError{}

var _Transaction_Action_InLookup = map[int32]struct{}{
	0: {},
	1: {},
	2: {},
}

// Validate checks the field values on InsertRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InsertRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InsertRequestMultiError, or
// nil if none found.
func (m *InsertRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Action

	if utf8.RuneCountInString(m.GetSku()) < 1 {
		err := InsertRequestValidationError{
			field:  "Sku",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetShelfQuantities()) < 1 {
		err := InsertRequestValidationError{
			field:  "ShelfQuantities",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetShelfQuantities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertRequestValidationError{
						field:  fmt.Sprintf("ShelfQuantities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertRequestValidationError{
						field:  fmt.Sprintf("ShelfQuantities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertRequestValidationError{
					field:  fmt.Sprintf("ShelfQuantities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if utf8.RuneCountInString(m.GetAuthorName()) < 1 {
		err := InsertRequestValidationError{
			field:  "AuthorName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InsertRequestMultiError(errors)
	}

	return nil
}

// InsertRequestMultiError is an error wrapping multiple validation errors
// returned by InsertRequest.ValidateAll() if the designated constraints
// aren't met.
type InsertRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertRequestMultiError) AllErrors() []error { return m }

// InsertRequestValidationError is the validation error returned by
// InsertRequest.Validate if the designated constraints aren't met.
type InsertRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertRequestValidationError) ErrorName() string { return "InsertRequestValidationError" }

// Error satisfies the builtin error interface
func (e InsertRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertRequestValidationError{}

// Validate checks the field values on GetDuringRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDuringRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDuringRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDuringRequestMultiError, or nil if none found.
func (m *GetDuringRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDuringRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDuringRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDuringRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDuringRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDuringRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDuringRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDuringRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDuringRequestMultiError(errors)
	}

	return nil
}

// GetDuringRequestMultiError is an error wrapping multiple validation errors
// returned by GetDuringRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDuringRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDuringRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDuringRequestMultiError) AllErrors() []error { return m }

// GetDuringRequestValidationError is the validation error returned by
// GetDuringRequest.Validate if the designated constraints aren't met.
type GetDuringRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDuringRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDuringRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDuringRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDuringRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDuringRequestValidationError) ErrorName() string { return "GetDuringRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetDuringRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDuringRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDuringRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDuringRequestValidationError{}

// Validate checks the field values on GetDuringResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDuringResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDuringResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDuringResponseMultiError, or nil if none found.
func (m *GetDuringResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDuringResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDuringResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDuringResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDuringResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDuringResponseMultiError(errors)
	}

	return nil
}

// GetDuringResponseMultiError is an error wrapping multiple validation errors
// returned by GetDuringResponse.ValidateAll() if the designated constraints
// aren't met.
type GetDuringResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDuringResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDuringResponseMultiError) AllErrors() []error { return m }

// GetDuringResponseValidationError is the validation error returned by
// GetDuringResponse.Validate if the designated constraints aren't met.
type GetDuringResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDuringResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDuringResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDuringResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDuringResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDuringResponseValidationError) ErrorName() string {
	return "GetDuringResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDuringResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDuringResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDuringResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDuringResponseValidationError{}

// Validate checks the field values on GetByUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUserRequestMultiError, or nil if none found.
func (m *GetByUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAuthorName()) < 1 {
		err := GetByUserRequestValidationError{
			field:  "AuthorName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetByUserRequestMultiError(errors)
	}

	return nil
}

// GetByUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetByUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetByUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUserRequestMultiError) AllErrors() []error { return m }

// GetByUserRequestValidationError is the validation error returned by
// GetByUserRequest.Validate if the designated constraints aren't met.
type GetByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUserRequestValidationError) ErrorName() string { return "GetByUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUserRequestValidationError{}

// Validate checks the field values on GetByUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetByUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetByUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetByUserResponseMultiError, or nil if none found.
func (m *GetByUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetByUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTransactions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetByUserResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetByUserResponseValidationError{
						field:  fmt.Sprintf("Transactions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetByUserResponseValidationError{
					field:  fmt.Sprintf("Transactions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetByUserResponseMultiError(errors)
	}

	return nil
}

// GetByUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetByUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetByUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetByUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetByUserResponseMultiError) AllErrors() []error { return m }

// GetByUserResponseValidationError is the validation error returned by
// GetByUserResponse.Validate if the designated constraints aren't met.
type GetByUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetByUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetByUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetByUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetByUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetByUserResponseValidationError) ErrorName() string {
	return "GetByUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetByUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetByUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetByUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetByUserResponseValidationError{}

// Validate checks the field values on AddUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddUserRequestMultiError,
// or nil if none found.
func (m *AddUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserName()) < 1 {
		err := AddUserRequestValidationError{
			field:  "UserName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddUserRequestMultiError(errors)
	}

	return nil
}

// AddUserRequestMultiError is an error wrapping multiple validation errors
// returned by AddUserRequest.ValidateAll() if the designated constraints
// aren't met.
type AddUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserRequestMultiError) AllErrors() []error { return m }

// AddUserRequestValidationError is the validation error returned by
// AddUserRequest.Validate if the designated constraints aren't met.
type AddUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRequestValidationError) ErrorName() string { return "AddUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRequestValidationError{}
