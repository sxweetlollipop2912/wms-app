// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO "Transaction" ("action", "sku", "shelf_name", "quantity", "author_id")
VALUES ($1, $2, $3, $4, $5)
RETURNING id, action, date, sku, shelf_name, quantity, author_id
`

type CreateTransactionParams struct {
	Action    int32  `json:"action"`
	Sku       string `json:"sku"`
	ShelfName string `json:"shelf_name"`
	Quantity  int32  `json:"quantity"`
	AuthorID  int32  `json:"author_id"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.Action,
		arg.Sku,
		arg.ShelfName,
		arg.Quantity,
		arg.AuthorID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.Date,
		&i.Sku,
		&i.ShelfName,
		&i.Quantity,
		&i.AuthorID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "User" ("name")
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findUserByName = `-- name: FindUserByName :many
SELECT id, name
FROM "User"
WHERE "name" ILIKE '%' || $1 || '%'
`

func (q *Queries) FindUserByName(ctx context.Context, dollar_1 pgtype.Text) ([]User, error) {
	rows, err := q.db.Query(ctx, findUserByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one

SELECT id, action, date, sku, shelf_name, quantity, author_id
FROM "Transaction"
WHERE "id" = $1
`

// -----------------------------------------------
// TRANSACTION TABLE
// -----------------------------------------------
func (q *Queries) GetTransactionById(ctx context.Context, id int32) (Transaction, error) {
	row := q.db.QueryRow(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Action,
		&i.Date,
		&i.Sku,
		&i.ShelfName,
		&i.Quantity,
		&i.AuthorID,
	)
	return i, err
}

const getTransactionsByAuthorId = `-- name: GetTransactionsByAuthorId :many
SELECT id, action, date, sku, shelf_name, quantity, author_id
FROM "Transaction"
WHERE "author_id" = $1
`

func (q *Queries) GetTransactionsByAuthorId(ctx context.Context, authorID int32) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByAuthorId, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.Date,
			&i.Sku,
			&i.ShelfName,
			&i.Quantity,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByAuthorName = `-- name: GetTransactionsByAuthorName :many
SELECT id, action, date, sku, shelf_name, quantity, author_id
FROM "Transaction"
WHERE "author_id" = (SELECT "id" FROM "User" WHERE "name" = $1)
`

func (q *Queries) GetTransactionsByAuthorName(ctx context.Context, name string) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByAuthorName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.Date,
			&i.Sku,
			&i.ShelfName,
			&i.Quantity,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsBySku = `-- name: GetTransactionsBySku :many
SELECT id, action, date, sku, shelf_name, quantity, author_id
FROM "Transaction"
WHERE "sku" = $1
`

func (q *Queries) GetTransactionsBySku(ctx context.Context, sku string) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsBySku, sku)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.Date,
			&i.Sku,
			&i.ShelfName,
			&i.Quantity,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByStartAndEndDate = `-- name: GetTransactionsByStartAndEndDate :many
SELECT id, action, date, sku, shelf_name, quantity, author_id
FROM "Transaction"
WHERE ("date" >= $1 OR $1 IS NULL)
  AND ("date" <= $2 OR $2 IS NULL)
`

type GetTransactionsByStartAndEndDateParams struct {
	StartDate pgtype.Timestamp `json:"start_date"`
	EndDate   pgtype.Timestamp `json:"end_date"`
}

func (q *Queries) GetTransactionsByStartAndEndDate(ctx context.Context, arg GetTransactionsByStartAndEndDateParams) ([]Transaction, error) {
	rows, err := q.db.Query(ctx, getTransactionsByStartAndEndDate, arg.StartDate, arg.EndDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Action,
			&i.Date,
			&i.Sku,
			&i.ShelfName,
			&i.Quantity,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByExactName = `-- name: GetUserByExactName :one
SELECT id, name
FROM "User"
WHERE "name" = $1
`

func (q *Queries) GetUserByExactName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByExactName, name)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserById = `-- name: GetUserById :one

SELECT id, name
FROM "User"
WHERE "id" = $1
`

// -----------------------------------------------
// USER TABLE
// -----------------------------------------------
func (q *Queries) GetUserById(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
